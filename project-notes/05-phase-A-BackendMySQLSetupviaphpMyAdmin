## ✅ LET’S BEGIN PHASE A: **Backend MySQL Setup via phpMyAdmin**

We’ll now ensure:

* ✅ **MySQL database** is ready
* ✅ **`.env` file** is properly configured (for local use only)
* ✅ Sequelize connects and creates the tables (`User` and `Expense`)
* ✅ Server runs without errors and is ready to accept data

---

### 🔹 STEP 1: Open phpMyAdmin and Create Database

1. Open: [http://localhost/phpmyadmin](http://localhost/phpmyadmin)
2. Click **“New”** in the sidebar.
3. Enter `expense_tracker` as the database name.
4. Select **Collation** as `utf8_general_ci` (default is okay).
5. Click **Create**.

> ✅ Done! Database is created. Now time to connect it to Sequelize.

---

### 🔹 STEP 2: Configure `.env` in `server/` Folder

Create a `.env` file inside `server/` folder (same level as `index.js`) and paste:

```
DB_NAME=expense_tracker
DB_USER=root
DB_PASS=             # leave blank if no password for root
DB_HOST=localhost
JWT_SECRET=myultrasecretkey
```

> ⚠️ Do NOT commit this file to GitHub. Make sure `.gitignore` includes:
    ```
    .env
    ```

---

### 🔹 STEP 3: Check Sequelize Connection

In `server/config/db.js` we already have this:

```js
const { Sequelize } = require('sequelize');
require('dotenv').config();

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASS,
  {
    host: process.env.DB_HOST,
    dialect: 'mysql',
  }
);

module.exports = sequelize;
```

✅ This code will attempt connection to MySQL db using `.env` values.

---

### 🔹 STEP 4: Sync Models and Start Server

Ensure this is at the end of `server/index.js`:

```js
sequelize.sync().then(() => {
  app.listen(5000, () => console.log('Server running on http://localhost:5000'));
});
```

This line makes Sequelize auto-create `Users` and `Expenses` tables inside `expense_tracker` db based on model definitions.

---

### 🔹 STEP 5: Start the Server

In terminal:

```bash
cd server
node index.js
```

**You should see:**

```
Server running on http://localhost:5000
```

Then go to `http://localhost/phpmyadmin` → Click `expense_tracker` → You’ll now see:

* ✅ `Users` table
* ✅ `Expenses` table

---

### 🔹 STEP 6: Test the API with Postman (Optional, but recommended)

Use [Postman](https://www.postman.com/) or Thunder Client (VS Code extension) to:

1. Test `POST /api/auth/register`:

   ```json
   {
     "username": "john",
     "email": "john@example.com",
     "password": "123456"
   }
   ```

2. Then test `POST /api/auth/login`:

   ```json
   {
     "email": "john@example.com",
     "password": "123456"
   }
   ```

✅ You should get a **JWT token** and user data.

---

## 🟢 Congratulations!

You’ve successfully:

* Created MySQL DB using phpMyAdmin
* Configured Sequelize to connect
* Created tables via model syncing
* Secured credentials via `.env`
* Server is running and auth API is working!

---

