ðŸš§ WHERE YOU ARE NOW: START OF PHASE B
    âœ… Youâ€™ve just begun Phase 2: Completing the Backend, where the focus is on:

    âœ… Creating middleware to protect expense routes using the JWT token.

    âœ… Creating the full ExpenseController (CRUD).

    âœ… Connecting each expense to the logged-in user using Sequelize relations (User.hasMany(Expense)).

    âœ… Testing it all in Thunder Client.

âœ…// middlewares/authMiddleware.js

  const jwt = require('jsonwebtoken');

  // Middleware to protect routes
    module.exports = (req, res, next) => {
      // Get the token from Authorization header
      const authHeader = req.headers['authorization'];
      if (!authHeader) return res.status(403).json({ error: 'No token provided' });

      // Format: "Bearer <token>"
      const token = authHeader.split(' ')[1];
      if (!token) return res.status(403).json({ error: 'Malformed token' });

      try {
        // Verify token
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        // Save user ID to request object
        req.userId = decoded.id;
        next();
      } catch (err) {
        res.status(401).json({ error: 'Invalid or expired token' });
      }
    };

  ðŸ’¡ What this does:
    It checks if a JWT token is included in the header (Authorization: Bearer <token>). This is NOT written in your code. Itâ€™s added manually in Thunder Client (or Postman) when youâ€™re testing protected routes like:
    GET /api/expenses
    POST /api/expenses

    Verifies that token.

    If valid: saves decoded.id (user's ID) into req.userId, so you can use it later in expense routes.

    You now protect routes, e.g.:
    js
      router.use(auth); // All expense routes are now secure!
    
    Without that Bearer <token>, the backend will return:
    { "error": "No token provided" }

âœ… How to Get the JWT Token?
  You get the token when you log in successfully.

  Step-by-Step:
  In Thunder Client (or Postman), do:
    POST http://localhost:5000/api/auth/login
  Body â†’ JSON:
    {
      "email": "john@example.com",
      "password": "123456"
    }
  Youâ€™ll get this response:
    json
    {
      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "user": {
        "id": 1,
        "username": "john",
        "email": "john@example.com"
      }
    }

 This token is what you use in Authorization for future requests.

In your server/index.js or main entry file:
  Ensure you have this before any routes:
    app.use(express.json()); // MUST come before app.use('/api/...')
    Full Correct Order index.js:
    const express = require('express');
    const cors = require('cors');
    const dotenv = require('dotenv');
    const authRoutes = require('./routes/authRoutes');
    const expenseRoutes = require('./routes/expenseRoutes');
    const sequelize = require('./config/db');

    dotenv.config();

    const app = express();

    // Middleware
    app.use(cors());
    app.use(express.json()); // <- THIS MUST BE HERE before the routes!

    //Routes
    app.get('/', (req, res) => {
      res.send('Server is up and running!');
    });

    app.use('/api/auth', authRoutes);
    app.use('/api/expenses', expenseRoutes);

    // DB & Server
    sequelize.sync().then(() => {
      app.listen(5000, () => {
        console.log('Server running on http://localhost:5000');
      });
    });

âœ… How to Use the Token in Thunder Client
  Go to Thunder Client (VS Code extension).

  Create a new request: GET http://localhost:5000/api/expenses

  Click Authorization tab â†’ select Bearer Token

  Paste your token from the login response:
  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
  OR:
  You can add a Header manually:

  





